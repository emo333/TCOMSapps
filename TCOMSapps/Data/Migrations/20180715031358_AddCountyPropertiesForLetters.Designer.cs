// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TCOMSapps.Data;
using TCOMSapps.Features.OOSTitles.entities;

namespace TCOMSapps.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180715031358_AddCountyPropertiesForLetters")]
    partial class AddCountyPropertiesForLetters
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TCOMSapps.Data.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("CountyId");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<int>("RoleTypeId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("TCOMSapps.Data.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("CountyId");

                    b.Property<int>("DefaultShiftId");

                    b.Property<int>("DefaultStationId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<Guid?>("SupervisorId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TCOMSapps.Features.Account.entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppRoleId");

                    b.Property<int>("CountyId");

                    b.Property<Guid?>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDt");

                    b.Property<Guid?>("DeletedByUserId");

                    b.Property<DateTime?>("DeletedDt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedByUserId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("TCOMSapps.Features.Account.entities.DepartmentSupervisor", b =>
                {
                    b.Property<int>("DepartmentId");

                    b.Property<int>("SupervisorId");

                    b.HasKey("DepartmentId", "SupervisorId");

                    b.ToTable("DepartmentSupervisors");
                });

            modelBuilder.Entity("TCOMSapps.Features.OOSTitles.entities.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("DefaultLocation");

                    b.Property<string>("Name");

                    b.Property<string>("OosTitleEmailAddress");

                    b.Property<string>("OosTitleLetterAddressLine1");

                    b.Property<string>("OosTitleLetterAddressLine2");

                    b.Property<string>("OosTitleLetterCity");

                    b.Property<string>("OosTitleLetterPhoneNumbers");

                    b.Property<string>("OosTitleLetterState");

                    b.Property<string>("OosTitleLetterTaxCollectorName");

                    b.Property<string>("OosTitleLetterWebsite");

                    b.Property<string>("OosTitleLetterZip");

                    b.Property<string>("OosTitlesCopyEmailAddress");

                    b.Property<string>("PocUserId");

                    b.Property<bool>("SharedData");

                    b.Property<int>("Theme");

                    b.HasKey("Id");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("TCOMSapps.Features.OOSTitles.entities.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustAddr1");

                    b.Property<string>("CustAddr2");

                    b.Property<string>("CustCity");

                    b.Property<string>("CustEmail");

                    b.Property<string>("CustFName");

                    b.Property<string>("CustFName2");

                    b.Property<string>("CustFName3");

                    b.Property<string>("CustLName");

                    b.Property<string>("CustLName2");

                    b.Property<string>("CustLName3");

                    b.Property<string>("CustPhone")
                        .IsRequired();

                    b.Property<string>("CustPhone2");

                    b.Property<string>("CustState");

                    b.Property<string>("CustZip");

                    b.Property<DateTime?>("FollowUpDt");

                    b.Property<string>("FollowUpNotes");

                    b.Property<DateTime>("InteractionDt");

                    b.Property<string>("InteractionType");

                    b.Property<string>("InteractionUserId");

                    b.Property<bool>("IsNew");

                    b.Property<string>("LhDlrAddr1");

                    b.Property<string>("LhDlrAddr2");

                    b.Property<string>("LhDlrCity");

                    b.Property<string>("LhDlrName");

                    b.Property<string>("LhDlrState");

                    b.Property<string>("LhDlrZip");

                    b.Property<string>("Notes");

                    b.Property<DateTime?>("ReceivedDt");

                    b.Property<int>("TitleId");

                    b.Property<DateTime?>("TitleIssuedDt");

                    b.Property<int>("TitleRecievedFromType");

                    b.Property<string>("TitleState");

                    b.Property<string>("VehMake");

                    b.Property<string>("VehModel");

                    b.Property<int>("VehYr");

                    b.Property<string>("Vin");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("TCOMSapps.Features.OOSTitles.entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Color");

                    b.Property<int>("CountyId");

                    b.Property<bool>("Default");

                    b.Property<string>("Manager");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TCOMSapps.Features.OOSTitles.entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountyId");

                    b.Property<string>("CustAddr1")
                        .IsRequired();

                    b.Property<string>("CustAddr2");

                    b.Property<string>("CustCity")
                        .IsRequired();

                    b.Property<string>("CustEmail");

                    b.Property<string>("CustFName")
                        .IsRequired();

                    b.Property<string>("CustFName2");

                    b.Property<string>("CustFName3");

                    b.Property<string>("CustLName")
                        .IsRequired();

                    b.Property<string>("CustLName2");

                    b.Property<string>("CustLName3");

                    b.Property<string>("CustPhone");

                    b.Property<string>("CustPhone2");

                    b.Property<string>("CustState")
                        .IsRequired();

                    b.Property<string>("CustZip")
                        .IsRequired();

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedDt");

                    b.Property<DateTime>("EntryDt");

                    b.Property<bool>("FollowUp");

                    b.Property<int>("InitialLocation");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LastInteraction");

                    b.Property<int>("LastTransfer");

                    b.Property<bool>("NewVeh");

                    b.Property<DateTime>("RecDt");

                    b.Property<int>("RecMethod");

                    b.Property<DateTime?>("SentBackToLhDlrDt");

                    b.Property<DateTime?>("SentToDmvDt");

                    b.Property<string>("SentUserId");

                    b.Property<DateTime?>("TitleIssueDt");

                    b.Property<string>("TitleNotes");

                    b.Property<int>("TitleRecievedFromType");

                    b.Property<string>("TitleState")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<string>("VehMake")
                        .IsRequired();

                    b.Property<string>("VehModel")
                        .IsRequired();

                    b.Property<int>("VehYr");

                    b.Property<string>("Vin")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("TCOMSapps.Features.OOSTitles.entities.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InRouteByUserId");

                    b.Property<DateTime?>("InRouteDt");

                    b.Property<bool>("IsInRoute");

                    b.Property<bool>("IsReceived");

                    b.Property<int>("LocationId");

                    b.Property<string>("Method");

                    b.Property<string>("Notes");

                    b.Property<string>("ReceivedByUserId");

                    b.Property<DateTime?>("ReceivedDt");

                    b.Property<int>("TitleId");

                    b.Property<string>("TransferRequestUserId");

                    b.Property<DateTime?>("TransferRequestedDt");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TitleId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("TCOMSapps.Services.AppSettings.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SmtpHost");

                    b.Property<int>("SmtpPort");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TCOMSapps.Data.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TCOMSapps.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TCOMSapps.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TCOMSapps.Data.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCOMSapps.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TCOMSapps.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCOMSapps.Features.Account.entities.Department", b =>
                {
                    b.HasOne("TCOMSapps.Data.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("TCOMSapps.Data.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");
                });

            modelBuilder.Entity("TCOMSapps.Features.OOSTitles.entities.Interaction", b =>
                {
                    b.HasOne("TCOMSapps.Features.OOSTitles.entities.Title")
                        .WithMany("Interactions")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCOMSapps.Features.OOSTitles.entities.Location", b =>
                {
                    b.HasOne("TCOMSapps.Features.OOSTitles.entities.County")
                        .WithMany("Locations")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TCOMSapps.Features.OOSTitles.entities.Transfer", b =>
                {
                    b.HasOne("TCOMSapps.Features.OOSTitles.entities.Location")
                        .WithMany("Transfers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TCOMSapps.Features.OOSTitles.entities.Title")
                        .WithMany("Transfers")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
